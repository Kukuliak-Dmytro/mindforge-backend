// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  TUTOR
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  avatarUrl String?
  createdAt DateTime @default(now())
  role      UserRole @default(STUDENT)

  // Relations
  profile         Profile?
  education       TutorEducation[]
  experiences     TutorExperience[]
  tutorSubjects   TutorSubject[]
  studentOrders   Order[]          @relation("StudentOrders")
  tutorOrders     Order[]          @relation("TutorOrders")
  sentMessages    Message[]
  studentReviews  Review[]         @relation("StudentReviews")
  tutorReviews    Review[]         @relation("TutorReviews")
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  bio         String?
  contactInfo String?
  phone       String?
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

model TutorEducation {
  id           String   @id @default(uuid())
  userId       String
  institution  String
  fieldOfStudy String
  degree       String
  startDate    DateTime
  endDate      DateTime?
  

  // Relations
  user         User     @relation(fields: [userId], references: [id])
}

model TutorExperience {
  id           String   @id @default(uuid())
  userId       String
  institution  String
  title        String
  startDate    DateTime
  endDate      DateTime?

  // Relations
  user         User     @relation(fields: [userId], references: [id])
}

model Subject {
  id          String   @id @default(uuid())
  name        String   @unique

  // Relations
  tutorSubjects TutorSubject[]
  orders        Order[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  isRecurring Boolean  @default(false)

  // Relations
  orders      Order[]
}

model TutorSubject {
  id             String   @id @default(uuid())
  tutorId        String
  subjectId      String
  hourlyRate     Decimal
  // Relations
  tutor         User     @relation(fields: [tutorId], references: [id])
  subject       Subject  @relation(fields: [subjectId], references: [id])

  @@unique([tutorId, subjectId])
}

model Order {
  id               String   @id @default(uuid())
  studentId        String
  tutorId          String
  subjectId        String
  categoryId       String
  title            String
  description      String?
  createdAt        DateTime @default(now())
  status           String
  totalPrice       Decimal
  sessionsCount    Int
  sessionsCompleted Int      @default(0)

  // Relations
  student         User     @relation("StudentOrders", fields: [studentId], references: [id])
  tutor           User     @relation("TutorOrders", fields: [tutorId], references: [id])
  subject         Subject  @relation(fields: [subjectId], references: [id])
  category        Category @relation(fields: [categoryId], references: [id])
  sessions        Session[]
  reviews         Review[]
  chat            Chat?
}

model Session {
  id              String   @id @default(uuid())
  orderId         String
  scheduledStart  DateTime
  scheduledEnd    DateTime
  actualStart     DateTime?
  actualEnd       DateTime?
  status          String
  meetingLink     String?

  // Relations
  order           Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  orderId   String
  studentId String
  tutorId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  student   User     @relation("StudentReviews", fields: [studentId], references: [id])
  tutor     User     @relation("TutorReviews", fields: [tutorId], references: [id])
}

model Chat {
  id        String    @id @default(uuid())
  orderId   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  order     Order     @relation(fields: [orderId], references: [id])
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}
        